Given an array of integers and a non-negative integer k, 
your task is to rotate the array to the right by k positions.

Rotation means that elements at the end of the array move to the beginning, 
and the rest of the elements shift to the right.

Input Format:
--------------
Line-1: An integer n, represents size of array
Line-2 to n: An integer array arr of length n.
Line-n+1: A non-negative integer k, representing the number of positions to rotate the array.

Output Format:
---------------
Line-1: Return the array after being rotated by k positions.

Constraints:
-------------
The rotation should be performed in place with O(1) extra space.
The time complexity should be O(n).

Sample Input-1:
---------------
5
1 2 3 4 5
2

Sample Output-1: 
----------------
4 5 1 2 3

Sample Input2:
--------------
5
1 2 3 4 5
5

Sample Output-2:
---------------
1 2 3 4 5

Sample Input-3:
---------------
5
1 2 3 4 5
7

Sample Output-3: 
----------------
4 5 1 2 3



Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. 
The operation should be performed in-place without making a copy of the array, and the time complexity should be minimized.

Constraints:
------------
nums contains only integers.
You must maintain the relative order of the non-zero elements.
The operation must be done in-place with O(1) extra space.

Input Format:
-------------
Line-1: An integer, size of the array
Line-2 to n: A single array of integers nums with at least one element.

Output Format:
-------------
Line-1: The modified input array nums, where all zeros are moved to the end while maintaining the relative order of the non-zero elements.

Sample Input-1:
----------------
5
0 1 0 3 12

1 0 0 3 12




Sample Output-1:
----------------
1 3 12 0 0

Sample Input-2:
---------------
1
0

Sample Output-2:
-----------------
0




Given a sorted array of integers, modify the array in place to remove the duplicates such that each element appears only once. 
You task is to return the new length of the array after duplicates are removed. 

You must do this with O(1) extra space (i.e., modify the array in place) and O(n) time complexity.

Input Format:
-------------
Line-1: An integer n, represents size of array.
Line-2 to n: A sorted integer array arr of length n.

Output Format:
--------------
Line-1: An integer, the new length of the array after removing the duplicates.

Constraints:
------------
You must modify the input array in place with O(1) extra memory.
The relative order of the elements should be preserved.
The function should run in O(n) time complexity.

Sample Input-1:
----------------
3
1 1 2

Sample Output-1:
-----------------
2

Explanation: The new length is 2, and the array becomes [1, 2].

Sample Input-2:
---------------
10
0 0 1 1 1 2 2 3 3 4

Sample Output-2:
-----------------
5

Explanation: The new length is 5, and the array becomes [0, 1, 2, 3, 4].

Imagine you are working on a string manipulation project, and you need to find all possible ways to split a given string into non-overlapping substrings. 
These substrings should be enclosed in curly braces {}, and you want to list all possible combinations of how the string can be divided.

Write a program that takes a string as input and returns all possible ways to group non-overlapping substrings within curly braces.

Input Format:
---------------
Line-1: A single string s consisting of lowercase or uppercase letters, numbers, or punctuation.

Output Format:
---------------
Line-1 to n: Print all possible combinations of non-overlapping substrings, each combination enclosed in curly braces {}.

Sample Input-1: 
---------------
abcd

Sample Output-1:
----------------
{abcd}
{abc}{d}
{ab}{cd}
{ab}{c}{d}
{a}{bcd}
{a}{bc}{d}
{a}{b}{cd}
{a}{b}{c}{d}

Sample Input-2: 
----------------
kmit

Sample Output-2:
-----------------
{kmit}
{kmi}{t}
{km}{it}
{km}{i}{t}
{k}{mit}
{k}{mi}{t}
{k}{m}{it}
{k}{m}{i}{t}

